rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Require the user to be authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Users may read their own profile. Writes are restricted so that clients
    // cannot modify premium status, badges or roles. Admin requests bypass
    // these checks.
    match /users/{userId} {
      allow read: if isSignedIn() && request.auth.uid == userId;
      allow write: if request.auth.token.admin == true ||
        (isSignedIn() &&
          request.auth.uid == userId &&
          !('isPremium' in request.resource.data) &&
          !('badges' in request.resource.data ? request.resource.data.badges.contains('premium') : false) &&
          !('roles' in request.resource.data));
    }

    // Match documents are readable by the matched users but writable only by admin
    match /matches/{matchId} {
      allow read: if isSignedIn() && request.auth.uid in resource.data.users;
      allow create, update, delete: if request.auth.token.admin == true;

      // All subcollections under a match follow the same access pattern
      match /{document=**} {
        allow read: if isSignedIn() &&
          request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.users;
        allow write: if request.auth.token.admin == true;
      }
    }

    // Event chats are only accessible to participants
    match /events/{eventId}/messages/{messageId} {
      allow read, write: if isSignedIn() &&
        request.auth.uid in get(/databases/$(database)/documents/events/$(eventId)).data.participants;
    }

    // Community posts are public read but only the creator may write
    match /communityPosts/{postId} {
      allow read: if true;
      allow write: if isSignedIn() &&
        request.auth.uid ==
          (resource.data.userId != null ? resource.data.userId : request.resource.data.userId);
    }

    // Game invites are writable only by the sender and must target a valid match
    match /gameInvites/{inviteId} {
      allow read: if isSignedIn();
      allow write: if request.auth.uid == resource.data.from &&
        resource.data.to == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.matches[request.auth.uid];
    }

    // Mirrored invites under each user are private to that user
    match /users/{userId}/gameInvites/{inviteId} {
      allow read, write: if request.auth.uid == userId;
    }

    // Game sessions are restricted to the listed players
    match /gameSessions/{sessionId} {
      allow read, write: if isSignedIn() &&
        (request.auth.uid in resource.data.players || request.auth.uid in request.resource.data.players);
    }

    // Realtime games restrict access to participating players
    match /games/{sessionId} {
      allow read, write: if request.auth.uid in resource.data.players;
    }

    // Game stats follow the same player restriction
    match /gameStats/{statId} {
      allow read, write: if isSignedIn() &&
        (request.auth.uid in resource.data.players || request.auth.uid in request.resource.data.players);
    }

    // Match history documents can only be accessed by the pair of users involved
    match /matchHistory/{pairId} {
      allow read, write: if isSignedIn() &&
        (request.auth.uid in resource.data.users || request.auth.uid in request.resource.data.users);
    }

    // Per-user notifications are private to that user
    match /users/{userId}/notifications/{notificationId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

    match /blocks/{uid}/blocked/{targetUid} {
      allow read, write: if request.auth.uid == uid;
    }

    match /likes/{uid}/liked/{targetId} {
      allow create, delete: if request.auth.uid == uid;
    }

    // Deny all other reads and writes
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
