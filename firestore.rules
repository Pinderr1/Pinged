rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Require the user to be authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    function isNotBlocked(a, b) {
      let data = get(/databases/$(database)/documents/users/$(a)).data;
      return !((data.blockedUsers != null && data.blockedUsers.hasAny([b])) ||
        (data.blockedBy != null && data.blockedBy.hasAny([b])));
    }

    function areMatched(a, b) {
      let matchId = a < b ? a + '_' + b : b + '_' + a;
      return exists(/databases/$(database)/documents/matches/$(matchId));
    }

    function matchExists(matchId) {
      return exists(/databases/$(database)/documents/matches/$(matchId));
    }

    function canAccessSession(matchId) {
      return isSignedIn() && matchExists(matchId) &&
        request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.users;
    }

    // User can read and write only their own profile, but certain fields are
    // server controlled and may not be written by the client. Admins may write
    // unrestricted for server-side updates such as Stripe webhooks.
    match /users/{uid} {
      // Public profile data may be read by any signed-in user
      allow read: if isSignedIn();

      // Clients may create their profile but certain fields are server controlled
      allow create: if isSignedIn() && request.auth.uid == uid &&
        !("isPremium" in request.resource.data) &&
        !("badges" in request.resource.data ?
            request.resource.data.badges.hasAny(["premium", "premiumMember"]) : false) &&
        !("roles" in request.resource.data) &&
        !("xp" in request.resource.data) &&
        !("streak" in request.resource.data) &&
        !("blockedUsers" in request.resource.data) &&
        !("blockedBy" in request.resource.data);

      // Updates are restricted to a predefined set of user-editable fields
      allow update: if request.auth.uid == uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly([
          'displayName',
          'photoURL',
          'avatarOverlay',
          'age',
          'gender',
          'genderPref',
          'location',
          'favoriteGames',
          'bio',
          'mood',
          'themePreset',
          'colorTheme',
          'promptResponses',
          'personalityTags',
          'badgePrefs',
          'badgePreferences',
          'jobTitle',
          'company',
          'school',
          'livingIn',
          'showDistance',
          'showAge',
          'showSocialMedia',
          'isInternational',
          'socialLinks',
          'onboardingComplete',
          'pushToken',
          'introClipUrl',
          'profilePrompts',
          'visibility',
          'discoveryEnabled',
          'messagePermission',
          'seeAgeRange',
          'seeGender',
          'seeLocation',
          'seeVerifiedOnly'
        ]);

      allow delete: if isSignedIn() && request.auth.uid == uid;

      // Admins may read or write unrestricted
      allow read, write: if request.auth.token.admin == true;

      match /tickets/{ticketId} {
        allow read, write: if request.auth.uid == uid || request.auth.token.admin == true;
      }
    }

    // Match documents are readable by the matched users but may only be created by the server
    match /matches/{matchId} {
      allow read: if request.auth.token.admin == true ||
        (isSignedIn() && request.auth.uid in resource.data.users);
      allow create: if isSignedIn() &&
        let other = request.resource.data.users[0] == request.auth.uid
          ? request.resource.data.users[1]
          : request.resource.data.users[0];
        request.resource.data.users hasAll([request.auth.uid, other]) &&
        exists(/databases/$(database)/documents/likes/$(request.auth.uid)/liked/$(other)) &&
        exists(/databases/$(database)/documents/likes/$(other)/liked/$(request.auth.uid));
      allow delete: if request.auth.token.admin == true;
      allow update: if request.auth.token.admin == true || (
        isSignedIn() &&
        request.auth.uid in resource.data.users &&
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['typingIndicator'])
      );

      // Chat messages can be created by participants
      match /messages/{messageId} {
        allow read: if request.auth.token.admin == true || (
          isSignedIn() &&
          request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.users);
        allow create: if request.auth.token.admin == true || (
          isSignedIn() &&
          request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.users);
        allow update, delete: if request.auth.token.admin == true;
      }

      // Game state for a match is writable by the participants
      match /state/{docId} {
        allow read, write: if request.auth.token.admin == true || (
          isSignedIn() &&
          request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.users);
      }

      // All other subcollections under a match follow the admin-only write pattern
      match /{document=**} {
        allow read: if request.auth.token.admin == true || (
          isSignedIn() &&
          request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.users);
        allow write: if request.auth.token.admin == true;
      }
    }


    // Community posts are public read but only the creator may write
    match /communityPosts/{postId} {
      allow read: if true;
      allow write: if isSignedIn() &&
        request.auth.uid ==
          (resource.data.userId != null ? resource.data.userId : request.resource.data.userId);
    }

    // Invites may only be updated or deleted by the sender or receiver
    match /invites/{inviteId} {
      allow update, delete: if isSignedIn() &&
        request.auth.uid in [resource.data.sender, resource.data.receiver];
      allow create: if false;
    }

    // Game invites are readable by the sender or recipient. Creation is
    // restricted to the sender while updates may only be performed by the
    // original participants. Both operations are denied if either user has
    // blocked the other. In addition, invites can only be created between
    // users who are already matched.
    match /gameInvites/{inviteId} {
      allow read: if request.auth.uid in [resource.data.from, resource.data.to];
      allow create: if request.auth.token.admin == true || (
        request.auth.uid == request.resource.data.from &&
        isNotBlocked(request.resource.data.from, request.resource.data.to) &&
        areMatched(request.resource.data.from, request.resource.data.to)
      );
      allow update: if request.auth.token.admin == true || (
        request.auth.uid in [resource.data.from, resource.data.to] &&
        isNotBlocked(resource.data.from, resource.data.to)
      );
    }

    // Game sessions are restricted to participants of the associated match
    match /gameSessions/{sessionId} {
      allow read: if canAccessSession(resource.data.sessionMatchId);
      allow write: if canAccessSession(request.resource.data.sessionMatchId);
    }

    // Public metadata about available games like trending status
    // should be readable by all clients while writes remain
    // restricted to administrators.
    match /games/{gameId} {
      allow read: if true;
      allow write: if request.auth.token.admin == true;
    }

    // Application remote configuration is public read, admin write
    match /config/{docId} {
      allow read: if true;
      allow write: if request.auth.token.admin == true;
    }

    // Game stats follow the same player restriction
    match /gameStats/{statId} {
      allow read, write: if isSignedIn() &&
        (request.auth.uid in resource.data.players || request.auth.uid in request.resource.data.players);
    }

    // Match history documents can only be accessed by the pair of users involved
    match /matchHistory/{pairId} {
      allow read, write: if isSignedIn() &&
        (request.auth.uid in resource.data.users || request.auth.uid in request.resource.data.users);
    }

    match /events/{eventId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.hostId;
      allow update, delete: if isSignedIn() && request.auth.uid == resource.data.hostId;

      // Attendees subcollection
      match /attendees/{uid} {
        allow read: if isSignedIn();
        allow create, delete: if isSignedIn() && request.auth.uid == uid;
        allow update: if false;
      }
    }

    // Per-user notifications are private to that user
    match /users/{userId}/notifications/{notificationId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

    match /blocks/{uid}/blocked/{targetUid} {
      allow read, write: if request.auth.token.admin == true || request.auth.uid == uid;
    }

    match /likes/{uid}/liked/{targetId} {
      allow write: if request.auth.token.admin == true;
    }

    match /likes/{uid}/likedBy/{otherUid} {
      allow read: if request.auth.token.admin == true || request.auth.uid == uid;
      allow delete: if request.auth.uid == otherUid;
    }

    // Cloud Functions may mirror likes here
    match /server/likes/{uid}/likedBy/{otherUid} {
      allow write: if request.auth.token.admin == true;
    }

    match /emails/{uid} {
      allow read, write: if request.auth.uid == uid;
    }

    match /pushTokens/{uid} {
      allow read, write: if request.auth.uid == uid;
    }

    // Deny all other reads and writes
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
